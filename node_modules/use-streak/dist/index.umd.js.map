{"version":3,"file":"index.umd.js","sources":["../src/lib.ts","../src/index.ts"],"sourcesContent":["// These are private functions\n// used by he package\n// but not meant to be used by consumers.\n\nexport const STREAK_KEY = \"streak\";\n\nexport type Streak = {\n  startDate: string;\n  lastLoginDate: string;\n  currentCount: number;\n};\n\nexport function formattedDate(date: Date): string {\n  // NOTE@jsjoeio\n  // sometimes this returns 11/11/2021\n  // other times it returns 11/11/2021, 12:00:00 AM\n  // which is why we call the .split at the end\n  return date.toLocaleString(\"en-US\").split(\",\")[0];\n}\n\nexport function buildStreakCount(date: Date): Streak {\n  return {\n    startDate: formattedDate(date),\n    lastLoginDate: formattedDate(date),\n    currentCount: 1,\n  };\n}\n\nexport function resetStreakCount(currentStreak: Streak, date: Date) {\n  return {\n    startDate: formattedDate(date),\n    lastLoginDate: formattedDate(date),\n    currentCount: 1,\n  };\n}\n\nexport function incrementStreakCount(\n  currentStreak: Streak,\n  date: Date\n): Streak {\n  return {\n    ...currentStreak,\n    lastLoginDate: formattedDate(date),\n    currentCount: (currentStreak.currentCount += 1),\n  };\n}\n\n/**\n *\n * @param currentDate\n * @param lastLoginDate\n * returns a boolean value indicating whether or not you should increment or\n * reset streak count\n */\nexport function shouldInrementOrResetStreakCount(\n  currentDate: string,\n  lastLoginDate: string\n) {\n  // We get 11/5/2021\n  // so to get 5, we split on / and get the second item\n  const difference =\n    parseInt(currentDate.split(\"/\")[1]) - parseInt(lastLoginDate.split(\"/\")[1]);\n\n  // logging in on the same day\n  if (difference === 0) {\n    return {\n      shouldIncrement: false,\n      shouldReset: false,\n    };\n  }\n  // This means they logged in the day after the current\n  if (difference === 1) {\n    return {\n      shouldIncrement: true,\n      shouldReset: false,\n    };\n  }\n\n  // Otherwise they logged in after a day, which would\n  // break the streak\n  return {\n    shouldIncrement: false,\n    shouldReset: true,\n  };\n}\n\nexport function intializeStreak(_localStorage: Storage, streak: Streak) {\n  const value = JSON.stringify(streak);\n  _localStorage.setItem(STREAK_KEY, value);\n}\n\nexport function updateStreak(_localStorage: Storage, streak: Streak) {\n  const value = JSON.stringify(streak);\n  _localStorage.setItem(STREAK_KEY, value);\n}\n\nexport function getStreak(_localStorage: Storage): Streak {\n  try {\n    const streak = JSON.parse(_localStorage.getItem(STREAK_KEY) || \"\");\n    return streak;\n  } catch (error) {\n    console.error(\n      error,\n      \"something went wrong getting the streak. JSON.parse error? initializing and getting streak.\"\n    );\n\n    const today = new Date();\n    return initializeAndGetStreak(_localStorage, today);\n  }\n}\n\nexport function doesStreakExist(_localStorage: Storage) {\n  return _localStorage.getItem(STREAK_KEY) !== null;\n}\n\nexport function removeStreak(_localStorage: Storage) {\n  _localStorage.removeItem(STREAK_KEY);\n}\n\nexport function initializeAndGetStreak(\n  _localStorage: Storage,\n  currentDate: Date\n) {\n  const initialStreak = buildStreakCount(currentDate);\n  intializeStreak(_localStorage, initialStreak);\n  const _streak = getStreak(_localStorage);\n  return _streak;\n}\n","import {\r\n  doesStreakExist,\r\n  getStreak,\r\n  shouldInrementOrResetStreakCount,\r\n  formattedDate,\r\n  updateStreak,\r\n  resetStreakCount,\r\n  initializeAndGetStreak,\r\n  incrementStreakCount,\r\n} from \"./lib\";\r\n\r\n/**\r\n *\r\n * @param {Storage} _localStorage - pass in `localStorage`\r\n * @param {Date} currentDate - pass in current date i.e. `new Date()`\r\n * @returns Streak - an object with `currentCount`, `lastLoginDate`, `startDate`\r\n * \r\n * @example\r\nimport { useStreak } from \"use-streak\";\r\n\r\nconst today = new Date();\r\nconst streak = useStreak(localStorage, today);\r\n// streak returns an object:\r\n// {\r\n//    currentCount: 1,\r\n//    lastLoginDate: \"11/11/2021\",\r\n//    startDate: \"11/11/2021\",\r\n// }\r\n */\r\nexport function useStreak(_localStorage: Storage, currentDate: Date) {\r\n  // Check if streak exists\r\n  const _doesStreakExist = doesStreakExist(_localStorage);\r\n\r\n  if (_doesStreakExist) {\r\n    const streak = getStreak(_localStorage);\r\n\r\n    // check if we should increment or reset\r\n    const { shouldIncrement, shouldReset } = shouldInrementOrResetStreakCount(\r\n      formattedDate(currentDate),\r\n      streak?.lastLoginDate || \"10/21/2021\"\r\n    );\r\n\r\n    if (shouldReset) {\r\n      const updatedStreak = resetStreakCount(streak, currentDate);\r\n      updateStreak(_localStorage, updatedStreak);\r\n      return updatedStreak;\r\n    }\r\n\r\n    if (shouldIncrement) {\r\n      const updatedStreak = incrementStreakCount(streak, currentDate);\r\n      updateStreak(_localStorage, updatedStreak);\r\n      return updatedStreak;\r\n    }\r\n\r\n    return streak;\r\n  }\r\n\r\n  const _streak = initializeAndGetStreak(_localStorage, currentDate);\r\n  return _streak;\r\n}\r\n"],"names":["STREAK_KEY","formattedDate","date","toLocaleString","split","updateStreak","_localStorage","streak","value","JSON","stringify","setItem","getStreak","parse","getItem","error","console","initializeAndGetStreak","Date","currentDate","intializeStreak","startDate","lastLoginDate","currentCount","_doesStreakExist","doesStreakExist","difference","parseInt","shouldIncrement","shouldReset","shouldInrementOrResetStreakCount","updatedStreak","currentStreak","incrementStreakCount"],"mappings":"ubAIaA,EAAa,kBAQVC,EAAcC,GAK5B,OAAOA,EAAKC,eAAe,SAASC,MAAM,KAAK,YA0EjCC,EAAaC,EAAwBC,GACnD,IAAMC,EAAQC,KAAKC,UAAUH,GAC7BD,EAAcK,QAAQX,EAAYQ,YAGpBI,EAAUN,GACxB,IAEE,OADeG,KAAKI,MAAMP,EAAcQ,QAAQd,IAAe,IAE/D,MAAOe,GAOP,OANAC,QAAQD,MACNA,EACA,+FAIKE,EAAuBX,EADhB,IAAIY,gBAaND,EACdX,EACAa,GAEA,IAvG+BjB,EA0G/B,gBAxC8BI,EAAwBC,GACtD,IAAMC,EAAQC,KAAKC,UAAUH,GAC7BD,EAAcK,QAAQX,EAAYQ,GAoClCY,CAAgBd,EAvGT,CACLe,UAAWpB,EAFkBC,EAuGQiB,GApGrCG,cAAerB,EAAcC,GAC7BqB,aAAc,IAqGAX,EAAUN,wBChGFA,EAAwBa,GAEhD,IDHsDjB,ECGhDsB,WDgFwBlB,GAC9B,OAA6C,OAAtCA,EAAcQ,QAAQd,GCjFJyB,CAAgBnB,GAEzC,GAAIkB,EAAkB,CACpB,IAAMjB,EAASK,EAAUN,cDqB3Ba,EACAG,GAIA,IAAMI,EACJC,SAASR,EAAYf,MAAM,KAAK,IAAMuB,SAASL,EAAclB,MAAM,KAAK,IAG1E,OAAmB,IAAfsB,EACK,CACLE,iBAAiB,EACjBC,aAAa,GAIE,IAAfH,EACK,CACLE,iBAAiB,EACjBC,aAAa,GAMV,CACLD,iBAAiB,EACjBC,aAAa,GC7C4BC,CACvC7B,EAAckB,UACdZ,SAAAA,EAAQe,gBAAiB,cAFnBM,IAAAA,gBAKR,KALyBC,YAKR,CACf,IAAME,EDdH,CACLV,UAAWpB,EAFyCC,ECeHiB,GDZjDG,cAAerB,EAAcC,GAC7BqB,aAAc,GCaZ,OADAlB,EAAaC,EAAeyB,GACrBA,EAGT,GAAIH,EAAiB,CACnB,IAAMG,WDZVC,EACA9B,GAEA,YACK8B,GACHV,cAAerB,EAAcC,GAC7BqB,aAAeS,EAAcT,cAAgB,ICMrBU,CAAqB1B,EAAQY,GAEnD,OADAd,EAAaC,EAAeyB,GACrBA,EAGT,OAAOxB,EAIT,OADgBU,EAAuBX,EAAea"}